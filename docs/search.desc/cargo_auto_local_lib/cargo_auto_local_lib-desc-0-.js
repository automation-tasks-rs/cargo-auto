searchState.loadedDescShard("cargo_auto_local_lib", 0, "cargo-auto\nANSI color\nautomation_tasks_rs\nautomation_tasks_rs/Cargo.toml\nautomation_tasks_rs/.file_hashes.json\nautomation_tasks_rs/.gitignore\nautomation_tasks_rs/src\nautomation_tasks_rs/src/main.rs\nautomation_tasks_rs/target/debug/automation_tasks_rs\nANSI color\nANSI color\nANSI color\ncalculate file hashes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ncommands accessible inside a Rust project folder\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if is not run in Rust project root directory\ncommands accessible outside a Rust project folder\ntemplate for new_auto_for_cli (automation_tasks_rs)\ntemplate for new_cli\ntemplate for new_pwa_wasm\ntemplate for new_wasm\nvarious utilities\nthe struct that represents the file automation_tasks_rs/._…\nfile metadata\nhash of file\nfilename with path from Cargo.toml folder\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncheck if the files are modified and in automation_tasks_rs …\nmake a vector of file metadata\nread automation_tasks_rs/.file_hashes.json\nsave the new file metadata\ncalculate the hash for a file\nvector of file metadata\nalready exists automation_tasks_rs directory\nbuild if the files are different then the hashes in …\nbuild automation_tasks_rs panic! if cannot compile …\nsub-command for bash auto-completion of <code>cargo auto</code> using …\nthe first argument is the task: new_auto_for_cli,… the …\nif there is no argument then print help if there exists …\nsub-command for bash auto-completion of <code>cargo auto</code> using …\nthe first argument is the task: new_cli, or new_wasm… in …\nit is run outside a Rust project It must have the argument …\nprint help\ncopies the template to the <code>automation_tasks_rs</code> directory …\nrun one shell command and return true if success")